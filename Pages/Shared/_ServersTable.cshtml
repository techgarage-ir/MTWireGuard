@using MTWireGuard.Models.Mikrotik
@model (List<WGServerViewModel>, List<ServerTrafficViewModel>)
@{
    var servers = Model.Item1;
    var traffic = Model.Item2;
}

@foreach (var server in servers)
{
    <tr class="align-middle" data-id="@server.Id">
        <td class="text-center">
            <span class="text-medium-emphasis">#@server.Id</span>
        </td>
        <td>
            <div>@server.Name</div>
        </td>
        <td>
            <div>@server.ListenPort</div>
        </td>
        <td>
            <div>@server.MTU</div>
        </td>
        <td>
            <div>@server.PublicKey</div>
        </td>
        <td>
            @{
                var enabled = server.IsEnabled;
                string enableORdisable = enabled ? "Disable" : "Enable";
                var currentServerTraffic = traffic.Find(s => s.Name == server.Name);
                var up = currentServerTraffic.Upload;
                var down = currentServerTraffic.Download;
            }
            <div>
                <svg class="icon">
                    <use xlink:href="vendors/coreui/icons/svg/free.svg#cil-data-transfer-up"></use>
                </svg>
                @up / @down
                <svg class="icon">
                    <use xlink:href="vendors/coreui/icons/svg/free.svg#cil-data-transfer-down"></use>
                </svg>
            </div>
        </td>
        <td>
            @switch (enabled)
            {
                case true:
                    <span class="badge rounded-pill text-bg-success">Enabled</span>
                    break;
                case false:
                    <span class="badge rounded-pill text-bg-danger">Disabled</span>
                    break;
            }
            @switch (server.Running)
            {
                case true:
                    <span class="badge rounded-pill text-bg-success">Running</span>
                    break;
                case false:
                    <span class="badge rounded-pill text-bg-secondary">Not Running</span>
                    break;
            }
        </td>
        <td>
            <div class="dropdown position-static">
                <button class="btn btn-transparent p-0" type="button" data-coreui-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <svg class="icon">
                        <use xlink:href="vendors/coreui/icons/svg/free.svg#cil-options"></use>
                    </svg>
                </button>
                <div class="dropdown-menu dropdown-menu-end">
                    <a class="dropdown-item" asp-page="Servers" asp-page-handler="Enable" asp-route-ID="@server.Id" asp-route-IsEnabled="@enabled" data-target="_self" onclick="ddBtnClick(event);">@enableORdisable</a>
                    <button class="dropdown-item update-btn" data-coreui-toggle="modal" data-coreui-target="#EditModal">Edit</button>
                    <button class="dropdown-item delete-btn text-danger" data-coreui-toggle="modal" data-coreui-target="#DeleteModal" data-id="@server.Id">Delete</button>
                </div>
            </div>
        </td>
    </tr>
}